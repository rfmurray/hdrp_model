% model_test_2.m  Test rendering and post-processing models for Lambertian
%                 and unlit materials

% See readme_appendix_b.txt for details about how to run this test.

clear; clc;

% addpath ../tools
addpath tools

% choose whether to test results from model_test Unity project with
% a Lambertian or an unlit material
testLambertian = true;
testTonemapping = true;
cubefile = 'model_test/Assets/square_root.cube';

% load data generated by Unity project model_test for this condition
fname = filename(testLambertian, testTonemapping);
d = readtable(fname);

% combine columns into m x 3 matrices
m_rgb = [ d.planeColorR d.planeColorG d.planeColorB ];
d_rgb = [ d.directionalColorR d.directionalColorG d.directionalColorB ];
a_rgb = [ d.ambientColorR d.ambientColorG d.ambientColorB ];

% apply Lambertian or unlit rendering model
if testLambertian
    c = 0.822;
    costheta = d.lightDirX .* d.planeNormalX + d.lightDirY .* d.planeNormalY + d.lightDirZ .* d.planeNormalZ;
    u_rgb = c * srgb(m_rgb) .* ( d.directionalIntensity .* srgb(d_rgb) .* max(costheta, 0) / pi + d.ambientMultiplier .* a_rgb );
else
    u_rgb = srgb(m_rgb);
end

% apply tonemapping
if testTonemapping
    tonemap = TonemapCube(cubefile);
    t_rgb = tonemap.apply(u_rgb);
else
    t_rgb = u_rgb;
end

% apply sRGB nonlinearity to get post-processed color coordinates v_k
v_rgb = srgbinv(t_rgb);

% plot predicted post-processed color coordinates v_k against actual,
% rendered coordinates; just plot a subset, so that results for the blue
% channel (which are plotted last) don't cover up results for the red
% and green channels
figure(1);
xylim = [ 0 1.2 ];
plot(xylim, xylim, 'k-');
hold on
hr = plot(d.renderR(1:30), v_rgb(1:30,1), 'ro', 'MarkerFaceColor', 'r', 'MarkerSize', 8);
hg = plot(d.renderG(1:30), v_rgb(1:30,2), 'go', 'MarkerFaceColor', 'g', 'MarkerSize', 8);
hb = plot(d.renderB(1:30), v_rgb(1:30,3), 'bo', 'MarkerFaceColor', 'b', 'MarkerSize', 8);
hold off
axis square
axis([ xylim xylim ]);
xlabel 'actual v_k'
ylabel 'predicted v_k'
legend([hr hg hb], 'red channel', 'green channel', 'blue channel', 'location', 'northwest', 'box', 'off');
set(gca,'FontSize',18);
print -dpdf model_test_2a.pdf
print -depsc2 model_test_2a.eps

figure(2);
xlim = [ 0 1 ];
hr = plot(d.renderR,v_rgb(:,1)-d.renderR, 'ro', 'MarkerFaceColor', 'r', 'MarkerSize', 8);
hold on
hg = plot(d.renderG,v_rgb(:,2)-d.renderG,'go', 'MarkerFaceColor', 'g', 'MarkerSize', 8);
hb = plot(d.renderB,v_rgb(:,3)-d.renderB,'bo', 'MarkerFaceColor', 'b', 'MarkerSize', 8);
plot(xlim,(-1/255)*[ 1 1 ],'k-');
plot(xlim,(1/255)*[ 1 1 ],'k-');
hold off
axis square
axis([ xlim (5/255)*[ -1 1 ] ]);
xlabel 'actual v_k'
ylabel 'prediction error for v_k'
legend([hr hg hb], 'red channel', 'green channel', 'blue channel', 'location', 'northwest', 'box', 'off');
set(gca,'FontSize',18);
print -dpdf model_test_2b.pdf
print -depsc2 model_test_2b.eps

function f = filename(lambertian, tonemap)
f = 'model_test/data';
if lambertian
    f = [ f '_lambertian' ];
else
    f = [ f '_unlit'; ];
end
if tonemap
    f = [ f '_tonemap' ];
else
    f = [ f '_notonemap' ];
end
f = [ f '.txt' ];
end
