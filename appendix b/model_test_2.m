% model_test_2.m  Test rendering and post-processing models for Lambertian
%                 and unlit materials

% See readme_appendix_b.txt for details about how to run this test.

clear; clc;

% addpath ../tools
addpath tools

% choose whether to test results from model_test Unity project with
% Lambertian or unlit material
testLambertian = true;

% choose whether to test results with or without tonemapping
testTonemapping = true;
cubefile = 'square_root.cube';

% load data generated by Unity project render_random for this condition
fname = 'data_L1_T1_F0_A1_S00100_M1.txt';
data = readtable(fname);

% tranform table into model parameters
m = [ data.m_r data.m_g data.m_b ];
d = [ data.d_r data.d_g data.d_b ];
a = [ data.a_r data.a_g data.a_b ];
v = [ data.v_r data.v_g data.v_b ];
i_d = data.i_d;
i_a = data.i_a;
l = [ data.l_x data.l_y data.l_z ];
n = [ data.n_x data.n_y data.n_z ];
costheta = sum(l .* n,2);

% apply Lambertian or unlit rendering model
if testLambertian
    c = 0.822;
    u_hat = c * srgb(m) .* ( i_d .* srgb(d) .* max(costheta, 0) / pi + i_a .* a );
else
    u_hat = srgb(m);
end

% apply tonemapping
if testTonemapping
    tonemap = TonemapCube(cubefile);
    t_hat = tonemap.apply(u_hat);
else
    t_hat = u_hat;
end

% apply sRGB nonlinearity to get post-processed color coordinates v_k
v_hat = srgbinv(t_hat);

% plot predicted post-processed color coordinates v_k against actual v_k
figure(1);
xylim = [ 0 1 ];
h = scatter(v,v_hat,80,[ 1 0 0 ; 0 1 0 ; 0 0 1 ],'filled');
legend(h, 'red channel', 'green channel', 'blue channel', 'location', 'northwest', 'box', 'off', 'AutoUpdate', 'off');
hold on
plot(xylim, xylim, 'k-');
hold off
box on
axis square
axis([ xylim xylim ]);
xlabel 'actual v_k'
ylabel 'predicted v_k'
set(gca,'FontSize',18);

% plot prediction error in v_k against actual v_k
figure(2);
xlim = [ 0 1 ];
h = scatter(v,v_hat-v,80,[ 1 0 0 ; 0 1 0 ; 0 0 1 ],'filled');
hold on
plot(xlim,(-1/255)*[ 1 1 ],'k-');
plot(xlim,(1/255)*[ 1 1 ],'k-');
hold off
box on
axis square
axis([ xlim (5/255)*[ -1 1 ] ]);
xlabel 'actual v_k'
ylabel 'prediction error for v_k'
legend(h, 'red channel', 'green channel', 'blue channel', 'location', 'northwest', 'box', 'off');
set(gca,'FontSize',18);
