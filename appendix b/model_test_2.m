% render_test_2.m  Test rendering and post-processing models for Lambertian
%                  and unlit materials

% See readme_appendix_b.txt for details about how to run this test.

clear; clc;

addpath tools

testLambertian = true;

if testLambertian

    % load data generated by Unity project model_test with a Lambertian
    % material
    d = readtable('model_test/data_lambertian.txt');

    % use dot product to find cosine of angle between lighting direction
    % and test plane surface normal
    costheta = d.lightDirX .* d.planeNormalX + d.lightDirY .* d.planeNormalY + d.lightDirZ .* d.planeNormalZ;

    % find rendering model's predictions for rendered color coordinates u_k
    c = 0.822;
    uR = c * srgb(d.planeColorR) .* ( d.directionalIntensity .* srgb(d.directionalColorR) .* max(costheta, 0) / pi + d.ambientMultiplier .* d.ambientColorR );
    uG = c * srgb(d.planeColorG) .* ( d.directionalIntensity .* srgb(d.directionalColorG) .* max(costheta, 0) / pi + d.ambientMultiplier .* d.ambientColorG );
    uB = c * srgb(d.planeColorB) .* ( d.directionalIntensity .* srgb(d.directionalColorB) .* max(costheta, 0) / pi + d.ambientMultiplier .* d.ambientColorB );

    % apply sRGB nonlinearity to get predictions for post-processed color
    % coordinates v_k
    vR = srgbinv(uR);
    vG = srgbinv(uG);
    vB = srgbinv(uB);

else

    % load data generated by Unity project model_test with an unlit material
    d = readtable('model_test/data_unlit.txt');

    % predicted post-processed color coordinates are simply the unlit
    % material coordinates
    vR = d.planeColorR;
    vG = d.planeColorG;
    vB = d.planeColorB;

end

% plot predicted post-processed color coordinates v_k against actual coordinates
xylim = [ 0 1.2 ];
plot(xylim, xylim, 'k--');
hold on
plot(d.renderR, vR, 'ro', 'MarkerFaceColor', 'r', 'MarkerSize', 10);
plot(d.renderG, vG, 'go', 'MarkerFaceColor', 'g', 'MarkerSize', 10);
plot(d.renderB, vB, 'bo', 'MarkerFaceColor', 'b', 'MarkerSize', 10);
hold off
axis square
axis([ xylim xylim ]);
xlabel 'actual v_k'
ylabel 'predicted v_k'
set(gca,'FontSize',18);
print -dpdf model_test_2.pdf
