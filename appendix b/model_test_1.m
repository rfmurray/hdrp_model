% model_test_1.m  Find rendering scale constant c for Lambertian materials
%                 (see equation (2) in main text)

% See readme_appendix_b.txt for details about how to run this test.

clear; clc;

% addpath ../tools
addpath tools

% load data generated by Unity project model_test with a Lambertian
% material and no tonemapping
data = readtable('model_test/data_lambertian_notonemap.txt');

% combine columns into m x 3 matrices
m = [ data.planeColorR data.planeColorG data.planeColorB ];
d = [ data.directionalColorR data.directionalColorG data.directionalColorB ];
a = [ data.ambientColorR data.ambientColorG data.ambientColorB ];
v = [ data.renderR data.renderG data.renderB ];

% apply Lambertian rendering model to get predicted rendered color
% coordinates u_k, without rendering scale constant c
costheta = data.lightDirX .* data.planeNormalX + data.lightDirY .* data.planeNormalY + data.lightDirZ .* data.planeNormalZ;
u_hat = srgb(m) .* ( data.directionalIntensity .* srgb(d) .* max(costheta, 0) / pi + data.ambientMultiplier .* a );

% apply sRGB nonlinearity to get actual rendered color coordinates u_k
u = srgb(v);

% discard values outside [ 0, 0.95 ]
k = u < 0 | u > 0.95 | u_hat < 0 | u_hat > 0.95;
u(k) = NaN;
u_hat(k) = NaN;

% plot predicted rendered color coordinates u_k, without scale constant c,
% against actual coordinates
xylim = [ 0 1.1 ];
plot(xylim, xylim, 'k-');
hold on
hr = plot(u(:,1), u_hat(:,1), 'ro', 'MarkerFaceColor', 'r', 'MarkerSize', 10);
hg = plot(u(:,2), u_hat(:,2), 'go', 'MarkerFaceColor', 'g', 'MarkerSize', 10);
hb = plot(u(:,3), u_hat(:,3), 'bo', 'MarkerFaceColor', 'b', 'MarkerSize', 10);
hold off
axis square
axis([ xylim xylim ]);
xlabel 'actual u_k'
ylabel 'predicted u_k'
legend([hr hg hb], 'red channel', 'green channel', 'blue channel', 'location', 'northwest', 'box', 'off', 'AutoUpdate', 'off');
set(gca,'FontSize',18);

% find regression slope of above plot
r = regress(u_hat(:), u(:));

% add regression line to plot
hold on
plot(xlim, r*xlim, 'r-');
hold off
print -dpdf model_test_1.pdf

% the scale constant that will adjust the predicted renderd color
% coordinates u_k so that they fall on the line y=x is the inverse
% of the regression slope
c = 1/r;
fprintf('rendering model scale constant: c = %.3f\n', c);
