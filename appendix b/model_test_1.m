% model_test_1.m  Find rendering scale constant c for Lambertian materials
%                 (see equation (2) in main text)

clear; clc;

% addpath ../tools
addpath tools

% load data generated by Unity project model_test with a Lambertian
% material and no tonemapping
data = readtable('data_L1_T0.txt');

% discard samples that may be maxed out
k = data.v_r <= 0.99 & data.v_g <= 0.99 & data.v_b <= 0.99;
data = data(k,:);

% tranform table into model parameters
e = data.e;                          % exposure
m = [ data.m_r data.m_g data.m_b ];  % material color
d = [ data.d_r data.d_g data.d_b ];  % directional light color
a = [ data.a_r data.a_g data.a_b ];  % ambient light color
v = [ data.v_r data.v_g data.v_b ];  % post-processed color
i_d = data.i_d;                      % directional light intensity
i_a = data.i_a;                      % ambient light intensity
l = [ data.l_x data.l_y data.l_z ];  % lighting direction
n = [ data.n_x data.n_y data.n_z ];  % plane normal
costheta = sum(l .* n, 2);

% apply Lambertian rendering model to get predicted rendered color
% coordinates u_k, without rendering scale constant c
u_mod_hat = srgb(m) .* ( i_d .* srgb(d) .* max(costheta, 0) / pi + i_a .* a ) ./ (2.^e);

% apply sRGB nonlinearity to get actual rendered color coordinates u_k
u = srgb(v);

% discard values outside [ 0, 0.95 ]
k = u < 0 | u > 0.95 | u_mod_hat < 0 | u_mod_hat > 0.95;
u(k) = NaN;
u_mod_hat(k) = NaN;

% plot predicted rendered color coordinates u_k, without scale constant c,
% against actual coordinates
xylim = [ 0 1.1 ];
plot(xylim, xylim, 'k-');
hold on
k = unidrnd(size(v,1),[200 1]);
h = scatter(u(k,:),u_mod_hat(k,:),80,[ 1 0 0 ; 0 1 0 ; 0 0 1 ],'filled');
legend(h, 'red channel', 'green channel', 'blue channel', 'location', 'northwest', 'box', 'off', 'AutoUpdate', 'off');
hold off
axis square
axis([ xylim xylim ]);
xlabel 'actual u_k'
ylabel 'predicted u_k'
set(gca,'FontSize',18);

% find regression slope of above plot
r = regress(u_mod_hat(:), u(:));

% add regression line to plot
hold on
plot(xlim, r*xlim, 'r-');
hold off

% the scale constant that will adjust the predicted renderd color
% coordinates u_k so that they fall on the line y=x is the inverse
% of the regression slope
c = 1/r;
fprintf('rendering model scale constant: c = %.3f\n', c);
