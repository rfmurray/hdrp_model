% model_test_1.m  Find rendering scale constant c for Lambertian materials
%                 (see equation (2) in main text)

% See readme_appendix_b.txt for details about how to run this test.

clear; clc;

% addpath ../tools
addpath tools

% load data generated by Unity project model_test with a Lambertian
% material and no tonemapping
d = readtable('model_test/data_lambertian_notonemap.txt');

% combine columns into m x 3 matrices
m_rgb = [ d.planeColorR d.planeColorG d.planeColorB ];
d_rgb = [ d.directionalColorR d.directionalColorG d.directionalColorB ];
a_rgb = [ d.ambientColorR d.ambientColorG d.ambientColorB ];
v_rgb = [ d.renderR d.renderG d.renderB ];

% apply Lambertian rendering model to get predicted rendered color
% coordinates u_k, without rendering scale constant c
costheta = d.lightDirX .* d.planeNormalX + d.lightDirY .* d.planeNormalY + d.lightDirZ .* d.planeNormalZ;
u_rgb_hat = srgb(m_rgb) .* ( d.directionalIntensity .* srgb(d_rgb) .* max(costheta, 0) / pi + d.ambientMultiplier .* a_rgb );

% apply sRGB nonlinearity to get actual rendered color coordinates u_k
u_rgb = srgb(v_rgb);

% discard values outside [ 0, 0.95 ]
k = u_rgb < 0 | u_rgb > 0.95 | u_rgb_hat < 0 | u_rgb_hat > 0.95;
u_rgb(k) = NaN;
u_rgb_hat(k) = NaN;

% plot predicted rendered color coordinates u_k, without scale constant c,
% against actual coordinates
xylim = [ 0 1.1 ];
plot(xylim, xylim, 'k-');
hold on
hr = plot(u_rgb(:,1), u_rgb_hat(:,1), 'ro', 'MarkerFaceColor', 'r', 'MarkerSize', 10);
hg = plot(u_rgb(:,2), u_rgb_hat(:,2), 'go', 'MarkerFaceColor', 'g', 'MarkerSize', 10);
hb = plot(u_rgb(:,3), u_rgb_hat(:,3), 'bo', 'MarkerFaceColor', 'b', 'MarkerSize', 10);
hold off
axis square
axis([ xylim xylim ]);
xlabel 'actual u_k'
ylabel 'predicted u_k'
legend([hr hg hb], 'red channel', 'green channel', 'blue channel', 'location', 'northwest', 'box', 'off', 'AutoUpdate', 'off');
set(gca,'FontSize',18);

% find regression slope of above plot
r = regress(u_rgb_hat(:), u_rgb(:));

% add regression line to plot
hold on
plot(xlim, r*xlim, 'r-');
hold off
print -dpdf model_test_1.pdf

% the scale constant that will adjust the predicted renderd color
% coordinates u_k so that they fall on the line y=x is the inverse
% of the regression slope
c = 1/r;
fprintf('rendering model scale constant: c = %.3f\n', c);
